/*1- Use o comando SQL apropriado para criar a tabela básica aluno com os seguintes campos: Uma chave primária;
O RA do aluno sem valores repetidos e com preenchimento obrigatório;
O nome do aluno com preenchimento obrigatório;
A data de nascimento com preenchimento obrigatório;
A quantidade de disciplinas que o aluno está cursando com preenchimento opcional;
A Mensalidade com preenchimento opcional;
Código do curso com preenchimento obrigatório;
Exemplos de código do curso: 1, 2, 3
1- Ciência da Computação, 2- Análise de Sistema e 3- Engenharia da Computação
2- Use o comando SQL apropriado para insira pelo menos quatro registros na tabela aluno.*/

CREATE TABLE tb_aluno(
	idt_aluno				INT				PRIMARY KEY 	AUTO_INCREMENT 	NOT NULL,
    ra_aluno				VARCHAR(8) 	UNIQUE 							NOT NULL,
	nome_aluno				VARCHAR(100)									NOT NULL,
    dta_nascimento_aluno	DATE											NOT NULL,
    qntd_disciplina_aluno	INT,
    mensalidade_aluno		DECIMAL(8,2),
    cod_curso_aluno			INT												NOT NULL
);

INSERT INTO tb_aluno (ra_aluno, nome_aluno, dta_nascimento_aluno, qntd_disciplina_aluno, mensalidade_aluno, cod_curso_aluno)
VALUES  ('12345678', 'Vanessa Gomes', '1998-11-22', 5, 1500.00, 1),
		('87654321', 'Armando Queiroz', '1996-10-02', 3, 600.50, 2),
        ('12344321', 'Joaquim Romero', '1995-04-09', 4, 1200.00, 3),
        ('56788765', 'Joana Bezerra', '1997-02-02', 2, 400.50, 2),
        ('12121212', 'Cristina Soares', '1997-02-02', 5, 1500.50, 3);

/*3- Selecione os alunos do curso 1 ou os alunos do curso 2. Desses alunos dos dois cursos, mostre apenas os alunos 
que pagam mais que R$ 1.000,00 de mensalidade. Resolva o where de duas maneiras diferentes. Classifique a con-
sulta pelo nome do aluno dentro de cada curso.*/

SELECT *
FROM tb_aluno
#WHERE cod_curso_aluno = 1 || cod_curso_aluno = 2 && mensalidade_aluno > 1000 #primeira forma - o or deve vir entre parentesis pq and tem proceddencia
WHERE cod_curso_aluno IN (1,2) && mensalidade_aluno > 1000 #segunda forma
ORDER BY nome_aluno, cod_curso_aluno;

/*4- Selecione os alunos que tenham as letras ‘m’ e ‘o’ em qualquer posição do nome. Nesta solução, não importa
qual letra vem primeiro. Resolva o where de duas maneiras diferentes:
- Primeira solução: use like e operador lógico;
- Segunda solução: use somente regexp, ou seja, não use operador lógico com regexp.*/

SELECT *
FROM tb_aluno
#WHERE nome_aluno like '%m%' and nome_aluno like '%o%'; #primeira solução
WHERE nome_aluno REGEXP ('o.*m|m.*o'); #segunda solução 

/*5- Use uma das funções de expressões regulares e crie um padrão de expressão regular para aceitar os números
possíveis do jogo mega-sena, ou seja, os seis números no intervalor fechado de 1 a 60. Evite dados inconsistentes.
Resolva de duas maneiras diferentes.*/

#SELECT '123456' REGEXP ('^[1-60]{6}$') AS numero_mega_sena; #errado
#SELECT '654321' REGEXP ('^\\d{6}$') AS numero_mega_sena; #errado
SELECT '3234560123243' 
REGEXP "(0[1-9]|[1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]]{6})$";
-- REGEXP "^(0[1-9]|[1-5][0-9]|60{6})$";
-- REGEXP "^(0[1-9]|[1-5][0-9]|60{6})$";
-- REGEXP "(0[1-9]|[1-5]\\D|60{6}$";


/*6- Construa o relatório dos aniversariantes por semestre, a consulta deve retornar o nome do aluno, data de nasci-
mento e a coluna semestre preenchida com os valores 1 ou 2. Classifique pelo mês de aniversário dentro de cada semestre.*/

SELECT nome_aluno, dta_nascimento_aluno, 
IF(MONTH(dta_nascimento_aluno) < 7, 1, 2) AS 'semestre'
FROM tb_aluno
ORDER BY MONTH(dta_nascimento_aluno), DAY(dta_nascimento_aluno);

/*7- Elabore o enunciado e a resolução de uma questão para ser resolvido com operador de concatenação, operadores
aritméticos, where com mais de uma condição e order by. Mostre o resultado da operação aritmética com duas casas decimais.
Obs.: não faça uma questão parecida com as questões desenvolvidas nas aulas.
quanto mais complexa a elaboração e a resolução da questão mais pontos ela valerá.*/


/* Calcule o valor de cada matéria dividindo o valor da mensalidade pela quantidade de matérias e escreva a frase 
"O/a aluno/a [nome] paga R$ [valor calculado] por matéria e R$ [valor] por mensalidade" e ordene de forma descrescente pelo valor da mensalidade. 
Selecione os alunos que fazem o curso 1 ou 2 e mais de duas matérias.
*/

SELECT CONCAT('O/a aluno/a ', nome_aluno, ' paga R$', ROUND(mensalidade_aluno/qntd_disciplina_aluno,2), ' por matéria e R$', mensalidade_aluno, ' por mensalidade')
FROM tb_aluno
WHERE cod_curso_aluno = 1 || cod_curso_aluno = 2 && qntd_disciplina_aluno > 2
ORDER BY mensalidade_aluno desc;


------------------------------------------------------------------------------

/* 
 ctrl + enter	executar o SQL onde o cursor está
 ctrl + d		duplica a linha 
 ctrl + l		apaga a linha				 	
 ctrl + s		salva o script SQL		   ----- */
-- 1. Mostre o nome, cargo e salário dos funcionários que ganham menos que a média salarial da empresa.
-- Classifique pelo salário.
-- 
select avg(salario)					# Antes, só a média salarial
from tb_empregado;
-- Solução
select nome, cargo, salario                # main query
from tb_empregado
where salario < ( select avg(salario)      # subquery
                  from tb_empregado )
order by salario
;
-- 2. Mostre o nome e o cargo dos funcionários que tenham o mesmo cargo do funcionário João.
-- 
select cargo            			# Antes, só o cargo do João
from tb_empregado
where nome = 'João';
-- Solução
select nome, cargo                 			# main query
from tb_empregado
where cargo in (select cargo                # subquery
               from tb_empregado
               where nome = 'João')
; 	# Usa o in porque pode ter dois funcionários com o mesmo nome e cargos diferentes.

-- 3.a-t. Refaça 6.4. Mostre o código do departamento, nome do departamento e código da região 
-- onde o funcionário Carlos trabalha. Resolva de duas maneiras (join e subquery).                
-- 
select d.idt, d.descricao, d.cod_regiao						# solução 1 com inner join
from  td_departamento d inner join tb_empregado e     		# 1 pra n
      on  d.idt = e.cod_dept
where e.nome = 'Francisco';
-- 
select d.idt, d.descricao, d.cod_regiao						# solução 2 com subquery
from td_departamento d
where d.idt in (select cod_dept
                from tb_empregado
                where nome = 'Francisco' );

-- 3.b. Refaça o exercício anterior para mostra a descrição da região também. 
-- Resolva de duas maneiras (só join e join junto com subquery).				
-- 
select d.idt, d.descricao, d.cod_regiao, r.descricao		# solução 1, só inner join
from  td_departamento d 
	inner join tb_empregado e on e.cod_dept = d.idt
	inner join td_regiao r on d.cod_regiao = r.idt
where e.nome = 'Francisco';
--
select d.idt, d.descricao, d.cod_regiao, r.descricao		# solução 2, só inner join
from td_departamento d inner join tb_empregado e inner join td_regiao r 
	on e.cod_dept = d.idt and d.cod_regiao = r.idt
where e.nome = 'Francisco';
-- 
select d.idt, d.descricao, d.cod_regiao, r.descricao		# Solução 3, join junto com subquery
from td_departamento d inner join td_regiao r
	on d.cod_regiao = r.idt
where d.idt in (select cod_dept                 			# subquery
                from tb_empregado
                where nome = 'Francisco');
-- 4-t. Mostre o nome e o salário dos funcionários e o código do gerente dos funcionários que trabalham 
-- para a Carolina, ou seja, que tenham a Carolina como gerente. Resolva com inner join e subquery.
-- 
select f.nome Funcionário, f.salario, g.idt			# inner join com autorrelacionamento
from tb_empregado f inner join tb_empregado as g
	on g.idt = f.cod_gerente 
where g.nome = 'Francisco';
-- 
select nome Funcionário, salario, cod_gerente 		# main query
from tb_empregado
where cod_gerente = (select idt         			# subquery
					 from tb_empregado
					 where nome = 'Francisco');
-- 5.a. Relacione os funcionários que fazem aniversário no mesmo mês do presidente da empresa.
-- 
select nome, dta_nascimento, cargo            		# main query
from tb_empregado
where month(dta_nascimento) = (select month(dta_nascimento)    # subquery
							   from tb_empregado
							   where cargo = 'presidente' ) 
; # Esta consulta traz os dados do presidente.
-- 5.b. Refaça o anterior para não trazer no resultado da consulta os dados do presidente.
-- 
select nome, dta_nascimento, cargo            		# main query
from tb_empregado
where month(dta_nascimento) = (select month(dta_nascimento)    # subquery
							   from tb_empregado
							   where cargo = 'presidente' ) 
	  and 
      cargo <> 'Presidente'    # cargo != 'Presidente'                  
; 
-- 6-t. Mostre a identidade, o nome e a data de contratação do funcionário mais antigo da empresa. 
-- Resolva de duas maneiras.
--
select identidade, nome, dta_inicio                      	# main query
from tb_empregado
where dta_inicio = (select min(dta_inicio) 		 	  		# subquery (mais antigo)
					from tb_empregado)
;
--
select identidade, nome, dta_inicio
from tb_empregado
order by dta_inicio 
limit 1                  		# Retorna apenas n linha, neste caso uma linha
;
-- 7-t. Mostre a identidade, o nome e a data de contratação do funcionário mais novo na empresa. 
-- Resolva de duas maneiras.
-- 
select identidade, nome, dta_inicio                			# main query
from tb_empregado
where dta_inicio = (select max(dta_inicio)       			# subquery (mais novo)
                    from tb_empregado );
-- 
select identidade, nome, dta_inicio
from tb_empregado
order by dta_inicio desc  
limit 1
;
-- 8. Mostre a identidade, o nome e a data de contratação dos funcionários mais antigo e mais novo da empresa.
-- Classifique pela data de contratação.
select identidade, nome, dta_inicio                       # main query
from tb_empregado 
where dta_inicio = (select min(dta_inicio) # Mais antigo  # subquery 1
                    from tb_empregado)
	  or 
      dta_inicio = (select max(dta_inicio) # Mais novo    # subquery 2
                    from tb_empregado)
order by dta_inicio				
;
-- 9. Mostre o nome, o salário e o cargo de todos os funcionários que ganham menos 
-- que a média salarial da empresa e que tenham o nome começando por ‘m’ ou ‘c’. 
-- Resolva de duas formas: 1. subquery e like e 2. subquery e regexp.
-- 
select identidade, nome, dta_inicio, salario		# main query (solução 1, subquery e like)
from tb_empregado
where salario < (select avg(salario)				# subquery
                 from tb_empregado )
	  and
      (nome like 'm%' or nome like 'c%')
;
-- Parênteses obrigatórios, por causa da hierarquia dos operadores lógicos: 1. not, 2. and, 3. or.
-- 
select identidade, nome, dta_inicio, salario		# main query (solução 2, subquery e regexp)
from tb_empregado
where salario < (select avg(salario)				# subquery
                 from tb_empregado )
	  and
      nome regexp ('^[mc]')
;
-- 10. Mostre a identidade, o sobrenome, o salário e o código do departamento 
-- dos funcionários que trabalham em qualquer departamento da região dois. 
-- Resolva duas formas, com inner join e subquery.
-- 
select e.identidade, e.sobrenome, e.salario, e.cod_dept, d.cod_regiao # com join
from tb_empregado as e inner join td_departamento d 
	on e.cod_dept = d.idt 
where d.cod_regiao = 2
;
--
select identidade, sobrenome, salario, cod_dept  	# main query 
from tb_empregado
where cod_dept in (select idt                 		# subquery
                  from td_departamento
                  where cod_regiao = 2);
